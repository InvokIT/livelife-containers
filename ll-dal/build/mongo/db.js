// Generated by CoffeeScript 1.10.0
var Promise, createModelFacade, dns, fs, log, modelFacades, mongoose, prepareDb;

mongoose = require("mongoose");

dns = require("dns");

Promise = require("promise");

log = require("log4js").getLogger("mongo/db");

fs = require("fs");

createModelFacade = require("./modelFacadeFactory");

modelFacades = (function() {
  var facade, fileName, i, len, mn, model, modelNames, r, ref;
  modelNames = (function() {
    var i, len, ref, results;
    ref = fs.readdirSync(__dirname + "/models");
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      fileName = ref[i];
      results.push(fileName.slice(0, fileName.lastIndexOf('.')));
    }
    return results;
  })();
  r = {};
  for (i = 0, len = modelNames.length; i < len; i++) {
    mn = modelNames[i];
    ref = require("./models/" + mn), model = ref.model, facade = ref.facade;
    facade = createModelFacade(model, facade);
    r[mn] = facade;
  }
  return r;
})();

prepareDb = function(hostname, replicaSet) {
  var connect;
  if (replicaSet == null) {
    replicaSet = "rs0";
  }
  log.debug("Entering prepareDb");
  connect = function() {
    return new Promise(function(resolve, reject) {
      return dns.lookup(hostname, {
        all: true
      }, function(err, addresses) {
        var connString, connection, m;
        if (err != null) {
          log.error("DNS lookup for " + hostname + " failed: " + err);
          reject(err);
          return;
        }
        log.trace("Resolved " + hostname + " to " + (JSON.stringify(addresses)) + ".");
        addresses = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = addresses.length; i < len; i++) {
            m = addresses[i];
            results.push(m.address);
          }
          return results;
        })();
        connection = mongoose.createConnection();
        connection.on("connecting", function() {
          return log.trace("Connecting to " + hostname + ".");
        });
        connection.on("connected", function() {
          return log.trace("Connected to " + hostname + ".");
        });
        connection.on("open", function() {
          return log.info("Opened connection to " + hostname + ".");
        });
        connection.on("disconnecting", function() {
          return log.trace("Disconnecting with " + hostname + ".");
        });
        connection.on("disconnected", function() {
          return log.trace("Disconnected with " + hostname + ".");
        });
        connection.on("close", function() {
          return log.info("Closed connection to " + hostname + ".");
        });
        connection.on("reconnected", function() {
          return log.info("Reconnected to " + hostname + ".");
        });
        connection.on("error", function(err) {
          return log.error("Connection error: " + err);
        });
        connection.on("fullsetup", function() {
          return log.trace("Connected to all nodes in replica set " + replicaSet + " on " + hostname + ".");
        });
        connString = "mongodb://" + (addresses.join(',')) + "/";
        if (addresses.length > 1) {
          connString += "?replicaSet=" + replicaSet;
        }
        return connection.open(connString, function(err) {
          if (err != null) {
            log.error("Failed to open connection string " + connString + ". " + err);
            reject(err);
            return;
          }
          return resolve(connection);
        });
      });
    });
  };
  return {
    use: function(modelsCallback) {
      log.debug("Entering use");
      return connect().then(function(connection) {
        var err, error;
        try {
          modelsCallback(modelFacades);
          return null;
        } catch (error) {
          err = error;
          return Promise.reject(err);
        } finally {
          connection.close();
        }
      });
    }
  };
};

module.exports = prepareDb;
