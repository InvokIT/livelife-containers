// Generated by CoffeeScript 1.10.0
var Promise, defaultFacade, defaultFacadeLog, defaultQueryOptions, log,
  slice = [].slice;

Promise = require("promise");

log = require("log4js").getLogger("mongo/modelFacadeFactory");

defaultFacadeLog = require("log4js").getLogger("mongo/modelFacadeFactory/defaultFacade");

defaultQueryOptions = {
  lean: true
};

defaultFacade = {
  create: function(values) {
    defaultFacadeLog.debug("Entering create");
    return new Promise(function(resolve, reject) {
      return resolve(new this._model(values));
    });
  },
  findById: function(id, propertiesToFind) {
    defaultFacadeLog.debug("Entering findById");
    return new Promise(function(resolve, reject) {
      var args, cb;
      cb = function(err, doc) {
        if (err != null) {
          defaultFacadeLog.error("findById error: " + err);
          return reject(err);
        } else {
          return resolve(doc);
        }
      };
      args = propertiesToFind != null ? [id, propertiesToFind, defaultQueryOptions, cb] : [id, defaultQueryOptions, cb];
      return this._model.findById.apply(this._model, args);
    });
  },
  save: function() {
    var d, documents, insertDocs, j, len, updateDocs;
    documents = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    defaultFacadeLog.debug("Entering save");
    insertDocs = [];
    updateDocs = [];
    for (j = 0, len = documents.length; j < len; j++) {
      d = documents[j];
      if (d._id != null) {
        updateDocs.push(d);
      } else {
        insertDocs.push(d);
      }
    }
    return new Promise(function(resolve, reject) {
      var document, k, len1;
      for (k = 0, len1 = updateDocs.length; k < len1; k++) {
        document = updateDocs[k];
        this._model.update({
          _id: document._id
        }, document, function(err) {
          if (err != null) {
            defaultFacadeLog.error("Error updating documents " + (JSON.stringify(documents)) + ": " + err);
            return reject(err);
          }
        });
      }
      if (insertDocs.length > 0) {
        this._model.create(insertDocs, function(err, savedDocs) {
          var i, l, len2, mn, results, sd;
          if (err != null) {
            defaultFacadeLog.error("Error inserting documents " + (JSON.stringify(documents)) + ": " + err);
            return reject(err);
          } else {
            results = [];
            for (i = l = 0, len2 = documents.length; l < len2; i = ++l) {
              d = documents[i];
              sd = savedDocs[i].toJSON();
              results.push((function() {
                var results1;
                results1 = [];
                for (mn in sd) {
                  results1.push(d[mn] = sd[mn]);
                }
                return results1;
              })());
            }
            return results;
          }
        });
      }
      return resolve();
    });
  }
};


/*
		update: (conditions, doc) ->
			defaultFacadeLog.debug "Entering update(#{JSON.stringify(conditions)}, #{JSON.stringify(doc)})"

			return new Promise (resolve, reject) ->
				this._model.update conditions, doc, (err) ->
					if err?
						defaultFacadeLog.error "Error updating: #{err}\nConditions: #{JSON.stringify(conditions)}\nDocument: #{JSON.stringify(doc)}"
						reject err
					else
						resolve()

		find: (conditions, propertiesToFind) ->
			defaultFacadeLog.debug "Entering find(#{JSON.stringify(conditions)})"

			return new Promise (resolve, reject) ->
				cb = (err, docs) ->
					if err?
						defaultFacadeLog.error "Error in find(#{JSON.stringify(conditions)}, #{JSON.stringify(propertiesToFind)})"
						reject err
					else
						resolve docs

				args = [conditions, defaultQueryOptions, cb]
				args.splice 1, 0, propertiesToFind if propertiesToFind?

				this._model.find.apply this._model, args
 */

module.exports = function(model, extensions) {
  var facade, method, methodName;
  facade = Object.create(defaultFacade);
  facade._model = model;
  if (extensions != null) {
    for (methodName in extensions) {
      method = extensions[methodName];
      facade[methodName] = method;
    }
  }
  return facade;
};
