// Generated by CoffeeScript 1.10.0
var liveChannelSchema, log, model, moment, mongoose;

moment = require("moment");

mongoose = require("mongoose");

log = require("log4js").getLogger("mongo/models/LiveChannel");

liveChannelSchema = new mongoose.Schema({
  channelName: {
    type: String,
    index: {
      unique: true
    }
  },
  rtmpAddress: String,
  since: {
    type: Date,
    "default": function() {
      return moment.utc().toDate();
    }
  },
  updated: {
    type: Date,
    index: {
      expires: "1m"
    },
    "default": Date.now
  }
});

model = mongoose.model("LiveChannel", liveChannelSchema);

module.exports = {
  model: model,
  facade: {
    save: function(channelName, rtmpAddress) {
      return new Promise(function(resolve, reject) {
        return model.update({
          channelName: channelName
        }, {
          channel: channel,
          rtmpAddress: rtmpAddress,
          updated: Date.now()
        }, {
          upsert: true
        }, function(err) {
          if (err != null) {
            log.error("Error in update(" + channelName + ", " + rtmpAddress + "): " + err);
            return reject(err);
          } else {
            return resolve();
          }
        });
      });
    },
    findRtmpAddress: function(channelName) {
      return new Promise(function(resolve, reject) {
        return model.findOne({
          channelName: channelName
        }, "rtmpAddress", {
          lean: true
        }, function(err, doc) {
          if ((err != null) || ((doc != null ? doc.rtmpAddress : void 0) == null)) {
            log.error("Error in findRtmpAddress(" + channelName + "): " + err);
            reject(err);
            return;
          }
          return resolve(doc != null ? doc.rtmpAddress : void 0);
        });
      });
    }
  }
};
